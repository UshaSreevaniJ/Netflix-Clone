{"version":3,"sources":["axios.js","Row.js","requests.js","Banner.js","App.js","reportWebVitals.js","index.js"],"names":["instance","axios","create","baseURL","Row","title","fetchUrl","isLargeRow","useState","movies","setMovies","trailerUrl","setTrailerUrl","useEffect","a","get","request","console","log","data","results","fetchData","table","className","map","movie","onClick","movieTrailer","Name","then","url","urlParams","URLSearchParams","URL","search","catch","error","handleClick","src","poster_path","backdrop_path","alt","name","id","videoId","opts","height","width","playerVars","autoplay","API_KEY","requests","fetchTrending","fetchNetflixOriginals","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchADocumentaries","Banner","str","n","setMovie","Math","floor","random","length","style","backgroundSize","backgroundImage","backgroundPosition","origial_name","overview","substr","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.b0d71333.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nconst instance = axios.create({\r\n    baseURL:\"https://api.themoviedb.org/3\",\r\n})\r\n\r\nexport default instance;","import React, { useState, useEffect } from 'react'\r\nimport axios from './axios'\r\nimport \"./Row.css\"\r\nimport YouTube from 'react-youtube'\r\nimport movieTrailer from 'movie-trailer'\r\n\r\n\r\nfunction Row({title, fetchUrl, isLargeRow}){\r\n\r\nconst [movies,setMovies]=useState([]);\r\nconst [trailerUrl, setTrailerUrl] = useState(\"\");\r\n\r\nconst base_Url=\"https://image.tmdb.org/t/p/original/\";\r\n\r\nuseEffect(()=>{\r\n\r\nasync function fetchData()\r\n{\r\n    const request  = await axios.get(fetchUrl);\r\n    console.log(request);\r\n    setMovies(request.data.results);\r\n    return request;\r\n}\r\n\r\nfetchData();\r\n\r\n},[fetchUrl]);\r\n\r\nconst opts={\r\n    height:\"300\",\r\n    width:\"100%\",\r\n    playerVars:{\r\n        autoplay:1,\r\n    },\r\n}\r\n\r\nconst handleClick = (movie)=>{\r\n    if(trailerUrl)\r\n    {\r\n        setTrailerUrl('');\r\n    }\r\n    else{\r\n        movieTrailer(movie?.Name ||\"\")\r\n        .then((url)=>{\r\n\r\n            const urlParams = new URLSearchParams(new URL(url).search);\r\n            setTrailerUrl(urlParams.get('v'));\r\n        })\r\n        .catch((error)=>(console.log(\"error\")))\r\n    }\r\n}\r\n\r\n//A code snippet that runs on specifi condition\r\nconsole.table(movies);\r\n    return(\r\n    <div className=\"row\">\r\n        <h2>{title}</h2>\r\n\r\n<div className=\"row__posters\">\r\n        {movies.map(movie=>(\r\n            <img key={movie.id} onClick={()=>handleClick(movie)} className={`row__poster ${isLargeRow && \"row__posterLarge\"}`} src={`${base_Url}${isLargeRow? movie.poster_path: movie.backdrop_path}`} alt={movie.name}/>\r\n        ))}\r\n    </div>\r\n    {trailerUrl && <YouTube videoId={trailerUrl} opts={opts}/>}\r\n    </div>\r\n    )\r\n}\r\n\r\nexport default Row;","\r\nconst API_KEY = \"aa2774815ca4a6f1cf24e3c2c346acab\";\r\n\r\nconst requests = {\r\n    fetchTrending:`/trending/all/week?api_key=${API_KEY}&language=en-US`,\r\n    fetchNetflixOriginals:`/discover/tv?api_key=${API_KEY}&with_networks=213`,\r\n    fetchTopRated:`movie/top_rated?api_key=${API_KEY}&language=en-US`,\r\n    fetchActionMovies:`discover/movie?api_key=${API_KEY}&with_genres=28`,\r\n    fetchComedyMovies:`discover/movie?api_key=${API_KEY}&with_genres=35`,\r\n    fetchHorrorMovies:`discover/movie?api_key=${API_KEY}&with_genres=27`,\r\n    fetchRomanceMovies:`discover/movie?api_key=${API_KEY}&with_genres=10749`,\r\n    fetchADocumentaries:`discover/movie?api_key=${API_KEY}&with_genres=99`\r\n\r\n}\r\n\r\nexport default requests;","import React, { useState, useEffect} from 'react'\r\nimport axios from './axios'\r\nimport requests from './requests';\r\nimport './Banner.css'\r\n\r\nfunction Banner()\r\n{\r\n\r\n    const [movie,setMovie]=useState([]);\r\n\r\n    const base_Url=\"https://image.tmdb.org/t/p/original/\";\r\n\r\n    useEffect(()=>{\r\nasync function fetchData()\r\n{\r\nconst request = await axios.get(requests.fetchNetflixOriginals);\r\nsetMovie(\r\n    request.data.results[\r\n        Math.floor(Math.random() * request.data.results.length-1)\r\n    ]\r\n    );\r\n    return request;\r\n}\r\nfetchData();\r\n    },[]);\r\n\r\nconsole.log(movie);\r\n\r\nfunction truncate(str,n){\r\n    return str?.length>n ? str.substr(0,n-1)+\"...\":str;\r\n}\r\n\r\n    return(\r\n        <header className=\"banner\" \r\n        style={{\r\n            backgroundSize:\"cover\",\r\n            backgroundImage:`url(${base_Url}/${movie?.backdrop_path})`,\r\n            backgroundPosition:\"center center\",\r\n        }}\r\n        >\r\n            <div className=\"banner__contents\">\r\n               \r\n    <h1 className=\"banner_title\">{movie?.name || movie?.title || movie?.origial_name}</h1>\r\n   \r\n    <div className=\"banner__buttons\">\r\n        <button className=\"banner__button\">Play</button>\r\n        <button className=\"banner__button\">My List</button>\r\n    </div>\r\n   \r\n        <h1 className=\"banner__description\">\r\n            {truncate(movie?.overview,500)}</h1>\r\n            </div>\r\n<div className=\"banner__fadeBottom\"></div>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Banner;","import React from 'react'\nimport './App.css';\nimport Row from './Row'\nimport requests from './requests'\nimport Banner from './Banner'\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <Banner />\n      <Row title=\"NETFLIX ORIGINALS\" fetchUrl={requests.fetchNetflixOriginals} isLargeRow={true}/>\n      <Row title=\"Trending Now\" fetchUrl={requests.fetchTrending}/>\n      <Row title=\"Top Rated\" fetchUrl={requests.fetchTopRated}/>\n      <Row title=\"Action Movies\" fetchUrl={requests.fetchActionMovies}/>\n      <Row title=\"Comedy Movies\" fetchUrl={requests.fetchComedyMovies}/>\n      <Row title=\"Horror Movies\" fetchUrl={requests.fetchHorrorMovies}/>\n      <Row title=\"Romance Movies\" fetchUrl={requests.fetchRomanceMovies}/>\n      <Row title=\"Documentaries\" fetchUrl={requests.fetchADocumentaries}/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}